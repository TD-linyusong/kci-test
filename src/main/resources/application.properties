api.name=java-reference-implementation
com.td.athena.utils.application.name=${api.name}

# API Gateway
com.td.api.gateway.url=<replace-me>
com.td.athena.security.api.ApiGatewayCertsClient/mp-rest/url=${com.td.api.gateway.url}
#com.td.athena.security.api.ApiGatewayCertsClient/mp-rest/connectTimeout=5000
#com.td.athena.security.api.ApiGatewayCertsClient/mp-rest/readTimeout=5000

# Authentication/Authorization
com.td.iam.url=<replace-me>
com.td.athena.security.client.OpenIdConfigurationClient/mp-rest/url=${com.td.iam.url}
com.td.athena.security.policy.authz.AuthzClient/mp-rest/url=${com.td.api.gateway.url}
com.td.athena.security.policy.retriever=com.td.athena.security.policy.authz.AuthzPoliciesRetriever
com.td.athena.security.client.TokenStoreClient/mp-rest/url=${com.td.api.gateway.url}/oauth/token
com.td.athena.security.client.TokenStoreClient.keyId=keyId
com.td.athena.security.client.TokenStoreClient.secretKey=secretKey
com.td.athena.security.client.TokenStoreClient.scopes=

# jwt
mp.jwt.verify.publickey.location=http://localhost:8080/certs
mp.jwt.verify.issuer=${com.td.api.gateway.url}
mp.jwt.verify.audiences=${com.td.athena.utils.application.name}
# this is needed because EC algorithms need to be explicitly configured
mp.jwt.verify.publickey.algorithm=ES256
#To fix certs issues, where Vert.x threads block and cause general failure
quarkus.smallrye-jwt.blocking-authentication=true
# workaround for https://github.com/quarkusio/quarkus/issues/17622 (I have no idea why our tokens have no 'iat' claim)
smallrye.jwt.time-to-live=0
smallrye.jwt.path.sub=aid
smallrye.jwt.path.groups=scp
# since we have unauthenticated routes we don't have 'aid' claim so we call it 'anonymous'
smallrye.jwt.claims.sub=anonymous

# Database
quarkus.datasource.db-kind=h2
quarkus.datasource.username:sa
quarkus.datasource.password:
quarkus.datasource.jdbc.url=jdbc:h2:mem:test;MODE=PostgreSQL;DB_CLOSE_DELAY=-1
quarkus.datasource.health.enabled=true
quarkus.datasource.metrics.enabled=true

# Flyway minimal config properties
quarkus.flyway.migrate-at-start=true

# OpenTelemetry (Tracing)
quarkus.opentelemetry.tracer.resource-attributes=service.name=${NEW_RELIC_APP_NAME:java-reference-implementation}
quarkus.opentelemetry.tracer.exporter.otlp.endpoint=${OTLP_TRACER_EXPORTER_ENDPOINT:http://localhost:4317}
# Required for NewRelic integration
quarkus.opentelemetry.tracer.exporter.otlp.headers=api-key=${NEW_RELIC_LICENSE_KEY:missing_new_relic_license_key}

# Micrometer (Metrics)
quarkus.micrometer.export.prometheus.path=/metrics
micrometer.newrelic.api-key=${NEW_RELIC_LICENSE_KEY:missing_new_relic_license_key}
micrometer.newrelic.service-name=${NEW_RELIC_APP_NAME:java-reference-implementation}

#resteasy
resteasy.server.tracing.type=ON_DEMAND
resteasy.server.tracing.threshold=SUMMARY

org.eclipse.microprofile.rest.client.propagateHeaders=Authorization,X-RESTEasy-Tracing-Accept,X-RESTEasy-Tracing-Threshold

#quarkus logging
quarkus.log.console.enable=true
quarkus.log.console.format=%z{UTC}%d{yyyy-MM-dd HH:mm:ss.SSS} %-5p [%c{3.}] (%t) [spanId=%X{spanId}:\
  traceId=%X{traceId}:tid=%X{tid}][accountId=%X{accountId}:userId=%X{userId}] %s%e%n
quarkus.log.console.level=DEBUG
quarkus.console.color=false
quarkus.log.console.json.additional-field.application.value=${api-name}

# local environment
%dev.com.td.api.gateway.url=https://api.talkdeskstg.com
%dev.com.td.iam.url=http://localhost:8091
%dev.quarkus.log.console.json=false
%test.quarkus.log.console.json=false
%dev.micrometer.newrelic.is-enabled=false
#%dev.quarkus.datasource.jdbc.driver=io.opentelemetry.instrumentation.jdbc.OpenTelemetryDriver
#%dev.quarkus.datasource.jdbc.url=jdbc:otel:postgresql://localhost:5432/my_database?current_schema=public
